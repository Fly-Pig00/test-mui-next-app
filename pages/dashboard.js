import React, { useState, useEffect } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { login } from '../redux/authReducer';
import { useRouter } from 'next/router';
import Head from 'next/head';
import axios from 'axios';
import { Typography, Grid } from '@mui/material';
import NavBar from '../components/Navbar';
import { makeStyles } from '@mui/styles';
import { API_ENDPOINT } from '../config';

const useStyles = makeStyles({
	root: {
		paddingTop: "40px"
	},
	desktopContainer: {
		textAlign: 'center',
		padding: '10px 60px',
		fontSize: '1.125rem'
	},
	lgShadow: {
		boxShadow: "0px 2px 4px -1px rgb(0 0 0 / 20%), 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%)"
	},
	mdShadow: {
		boxShadow: "0px 2px 4px -1px rgb(0 0 0 / 10%), 0px 4px 5px 0px rgb(0 0 0 / 5%), 0px 1px 10px 0px rgb(0 0 0 / 7%)"
	},
	mobileContainer: {
		margin: '1rem 0',
		padding: '0 2rem',
		textAlign: 'center',
		fontSize: '1.25rem'
	},
	desktopTh: {
		padding: "1rem 0",
		color: "white",
		backgroundColor: "#1976d2"
	},
	desktopTd: {
		color: "rgb(75, 85, 99)",
		padding: "1.5rem 0",
	},
	mobileTh: {
		backgroundColor: "#1976d2",
		color: "white",
		padding: "1.5rem"
	},
	mobileTd: {
		padding: "1.5rem 0"
	}
});


export default function Dashboard(props) {

	const classes = useStyles(props);
	const [users, setUsers] = useState([]);
	const [matches, setMatches] = useState(true)

	const navigate = useRouter();
	const dispatch = useDispatch();
	const auth = useSelector((state) => state.auth);

	useEffect(() => {
		const user = JSON.parse(localStorage.getItem("user"));
		if (!user) {
			navigate.push("/register");
		} else {
			dispatch(login(user));
		}
	}, []);

	useEffect(() => {
		axios.get(API_ENDPOINT)
			.then(res => {
				setUsers(res.data);
			})
	}, []);

	useEffect(() => {
		const media = window.matchMedia('(min-width: 950px)');
		if (media.matches !== matches) {
			setMatches(media.matches);
		}
		const listener = () => setMatches(media.matches);
		window.addEventListener("resize", listener);
		return () => window.removeEventListener("resize", listener);
	}, [matches]);

	const destopView = (
		<Grid container justifyContent="center" className={classes.desktopContainer}>
			<Grid container className={`${classes.desktopTh} ${classes.lgShadow}`}>
				<Grid xs={1} item>ID</Grid>
				<Grid xs={2} item>User Name</Grid>
				<Grid xs={3} item>Email</Grid>
				<Grid xs={2} item>Address</Grid>
				<Grid xs={2} item>Phone</Grid>
				<Grid xs={2} item>Company</Grid>
			</Grid>
			{
				users.length !== 0 && users.map((user, key) => (
					<Grid container key={key} className={`${classes.desktopTd} ${classes.mdShadow}`}>
						<Grid item xs={1}>
							{user.id}
						</Grid>
						<Grid item xs={2}>
							{user.name}
						</Grid>
						<Grid item xs={3}>
							{user.email}
						</Grid>
						<Grid item xs={2}>
							{user.address.city}
						</Grid>
						<Grid item xs={2}>
							{user.phone.split(' ')[0]}
						</Grid>
						<Grid item xs={2}>
							{user.company.name}
						</Grid>
					</Grid>
				))}
		</Grid>
	);

	const mobileView = (
		<Grid className={classes.mobileContainer}>
			{
				users.length !== 0 && users.map((user, key) => (
					<Grid container key={key}>
						<Grid xs={6} item className={`${classes.mobileTh} ${classes.lgShadow}`}>ID</Grid>
						<Grid xs={6} item className={`${classes.mobileTh} ${classes.lgShadow}`}>{user.id}</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>User Name</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>{user.name}</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>Email</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>{user.email}</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>Address</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>{user.address.city}</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>Phone</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>{user.phone.split(' ')[0]}</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>Company</Grid>
						<Grid xs={6} item className={`${classes.mobileTd} ${classes.mdShadow}`}>{user.company.name}</Grid>
					</Grid>
				))
			}
		</Grid>
	);

	return (
		<div>
			<Head>
				<title>Test Assignment</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<main>
				<NavBar />
				<div className={classes.root}>
					<Typography variant="h3" align="center">
						Welcome {auth.username}!
					</Typography>
				</div>
				{matches ? destopView : mobileView}
			</main>
		</div>
	);
}
